
source --> https://www.linode.com/docs/guides/what-are-javascript-service-workers/

project name and directory --> ./brand/cluster_demo

pm2 commands
--> pm2 start index.js -i 0
    --> The -i option accepts the number of worker processes you want pm2 to create. If you pass the argument 0,
        pm2 will automatically create as many worker processes as there are CPUs on your machine.

--> pm2 logs
    --> displays the logs generated by the worker processes

--> pm2 ls
    --> shows the status of the processes

--> pm2 delete index.js
    --> deletes cluster for the file

--> pm2 ecosystem
    --> generates a pm2 config file

note: Rename .js to .cjs to enable support for ES modules:
--> mv ecosystem.config.js ecosystem.config.cjs

In your ecosystem.config.cjs file, add the highlighted code below:
 apps : [{
    script: 'index.js',
    watch: '.',
    name: "cluster_app",
    instances: 0,
    exec_mode: "cluster",
  }, {...}]
  
  note: this section of the code displays the added parts and does not constutute the whole file.

The script option accepts the file that will run in each process that the pm2 package will spawn. 
The name property accepts any name that can identify the cluster, which can help if you need to stop, restart, or perform other actions. 
The instances property accepts the number of instances you want. Setting instances to 0 will make pm2 spawn as many processes as there are CPUs. 
The exec_mode accepts the cluster option, which tells pm2 to run in a cluster.



--> pm2 start ecosystem.config.cjs
    -->command used To start the cluster from a config file.

note: The last line confirms that 4 processes are running. 
Because you havenâ€™t created a service-worker script in this tutorial, you can ignore the error about the service-worker not being found.

 --> pm2 restart cluster_app
    --> If you want to restart the cluster, you can use the app name you defined in the ecosystem.config.cjs file, which in this case is cluster_app

             Bommands synopsis

    Command	          |     Description
                      |
pm2 start app_name	  | Starts the cluster
pm2 restart app_name  |	Kills the cluster and starts it again
pm2 reload app_name	  | Restarts the cluster without downtime
pm2 stop app_name	  | Stops the cluster
pm2 delete app_name	  | Deletes the cluster

pm2 documentation --> https://pm2.keymetrics.io/